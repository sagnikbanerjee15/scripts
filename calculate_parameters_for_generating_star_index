#!/usr/bin/env python3

##############################################################################################################################
# Command - calculate_parameters_for_generating_star_index \
#                --reference <reference filename> \
#                --genome_sa_index_and_bases_output_filename <genome_sa_index_and_bases filename> \
#                --genome_chr_bin_n_bits_output_filename <genome_chr_bin_n_bits filename>
##############################################################################################################################
from argparse import RawTextHelpFormatter

import os
import glob
import argparse
import sys
import math

def parseCommandLineArguments():

    parser = argparse.ArgumentParser( prog = "prepare_soapdenovo2_configuration_file", description = """Prepares the configuration file for soapdenovo2""", formatter_class = RawTextHelpFormatter )

    parser.add_argument( "--reference", "-r", help = "Enter the reference filename", required = True )
    parser.add_argument( "--genome_sa_index_and_bases_output_filename", "-genome_sa_index_and_bases_output_filename", help = "Enter the filename where genome_sa_index_and_bases will be stored", required = True )
    parser.add_argument( "--genome_chr_bin_n_bits_output_filename", "-genome_chr_bin_n_bits_output_filename", help = "Enter the filename where genome_chr_bin_n_bits will be stored", required = True)
    return parser.parse_args()

def main():
    options = parseCommandLineArguments()
    
    fhr = open(options.reference,"r")
    num_chromosomes = 0
    reference_length = 0
    for line in fhr:
        if line[0]=='>':
            num_chromosomes+=1
        else:
            reference_length+=len(line.strip())
    fhr.close()
    
    genomeSAindexNbases = min(14, math.log2(reference_length)/2 - 1)
    genomeChrBinNbits = min(18,math.log2(reference_length/num_chromosomes))
    
    open(options.genome_sa_index_and_bases_output_filename,"w").write(str(genomeSAindexNbases))
    open(options.genome_chr_bin_n_bits_output_filename,"w").write(str(genomeChrBinNbits))

if __name__ == "__main__":
    main()