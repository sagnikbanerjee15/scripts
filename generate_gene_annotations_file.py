import os
import sys
import argparse
import multiprocessing
import subprocess
import collections
import re
import pickle
import numpy as np
import time
import glob

map={"TTT":"F", "TTC":"F", "TTA":"L", "TTG":"L",
    "TCT":"S", "TCC":"S", "TCA":"S", "TCG":"S",
    "TAT":"Y", "TAC":"Y", "TAA":"*", "TAG":"*",
    "TGT":"C", "TGC":"C", "TGA":"*", "TGG":"W",
    "CTT":"L", "CTC":"L", "CTA":"L", "CTG":"L",
    "CCT":"P", "CCC":"P", "CCA":"P", "CCG":"P",
    "CAT":"H", "CAC":"H", "CAA":"Q", "CAG":"Q",
    "CGT":"R", "CGC":"R", "CGA":"R", "CGG":"R",
    "ATT":"I", "ATC":"I", "ATA":"I", "ATG":"M",
    "ACT":"T", "ACC":"T", "ACA":"T", "ACG":"T",
    "AAT":"N", "AAC":"N", "AAA":"K", "AAG":"K",
    "AGT":"S", "AGC":"S", "AGA":"R", "AGG":"R",
    "GTT":"V", "GTC":"V", "GTA":"V", "GTG":"V",
    "GCT":"A", "GCC":"A", "GCA":"A", "GCG":"A",
    "GAT":"D", "GAC":"D", "GAA":"E", "GAG":"E",
    "GGT":"G", "GGC":"G", "GGA":"G", "GGG":"G"}

def parseCommandLineArguments():
    """
    Parses the arguments provided through command line.
    Launch python finder.py --help for more details
    """
    parser = argparse.ArgumentParser(prog="generate_gene_annotations_file.py",description="Generates gene annotations and finds inconsistencies across different files")
    parser.add_argument("--gffread_filename","-gffread_filename",help="Enter the fasta filename which is generated by gffread")
    parser.add_argument("--cdna_filename","-cdna_filename",help="Enter the fasta cDNA filename downloaded from Ensemble")
    parser.add_argument("--ncdna_filename","-ncdna_filename",help="Enter the fasta ncDNA filename downloaded from Ensemble")
    parser.add_argument("--cds_filename","-cds_filename",help="Enter the fasta CDS filename downloaded from Ensemble")
    parser.add_argument("--proteome","--proteome",help="Enter the fasta filename of the proteome downloaded from Ensemble")
    parser.add_argument("--output_filename","--output_filename",help="Enter output filename")
    
    return parser.parse_args()

def readFastaFile(filename):
    """
    """
    data={}
    fhr=open(filename,"r")
    for line in fhr:
        if ">" in line:
            data[line.strip()[1:].split()[0]]=[fhr.readline().strip(),line.strip()[1:]]
    fhr.close()
    return data

def convertToPeptide(seq,transcript):
    if len(seq)%3!=0:
        return [-1,0]
    peptide=""
    stop_codon_in_peptide=0
    for num,codon in enumerate([seq[i:i+3] for i in range(0, len(seq), 3)]):
        try:
            peptide+=map[codon]
            """if map[codon]=="" and num!=len([seq[i:i+3] for i in range(0, len(seq), 3)])-1:
                stop_codon_in_peptide=1"""
        except KeyError:
            #print(codon)
            #print(transcript,seq)
            peptide+="X"
    return [peptide[:-1],1 if "*" in peptide[:-1] else 0]

def compareAllFilesAndGenerateAnnotationsFile(ensemble_cdna,ensemble_cds,ensemble_prot,gffread_cdna,output_filename):
    """
    """
    all_possible_transcripts=list(ensemble_cdna.keys())
    all_possible_transcripts.extend(list(gffread_cdna.keys()))
    all_possible_transcripts=list(set(all_possible_transcripts))
    #print(len(all_possible_transcripts),all_possible_transcripts[:5])
    complete_info={}
    for transcript in all_possible_transcripts:
        ensemble_cdna_seq=ensemble_cdna[transcript][0] if transcript in ensemble_cdna else ""
        ensemble_cds_seq=ensemble_cds[transcript][0] if transcript in ensemble_cds else ""
        ensemble_prot_seq=ensemble_prot[transcript][0] if transcript in ensemble_prot else ""
        gffread_cdna_seq=gffread_cdna[transcript][0] if transcript in gffread_cdna else ""
        trouble=0
        if "CDS=" in gffread_cdna[transcript][1]:
            #print(gffread_cdna[transcript][1].split("CDS=")[-1].split()[0])
            cds_start,cds_end=gffread_cdna[transcript][1].split("CDS=")[-1].split()[0].split("-")
            #print(cds_start,cds_end)
            if ensemble_cds_seq!=gffread_cdna_seq[int(cds_start)-1:int(cds_end)]:
                """print(transcript,"TROUBLE")
                print(ensemble_cds_seq)
                print(gffread_cdna_seq[int(cds_start)-1:int(cds_end)])
                print("Ensemble",convertToPeptide(ensemble_cds_seq,transcript))
                print("Gffread",convertToPeptide(gffread_cdna_seq[int(cds_start)-1:int(cds_end)],transcript))"""
                trouble=1
                #print(transcript,"TROUBLE")
            if convertToPeptide(ensemble_cds_seq,transcript)[0]!=ensemble_prot_seq:
                trouble=2
                if convertToPeptide(ensemble_cds_seq,transcript)[1]==1:
                    trouble=4
                #if len(convertToPeptide(ensemble_cds_seq,transcript))==len(ensemble_prot_seq):continue
                """print(transcript,"Protein mismatch")
                print(convertToPeptide(ensemble_cds_seq,transcript)[0])
                print(ensemble_prot_seq)"""
                #print(transcript,"Protein mismatch")
            
            if convertToPeptide(ensemble_cds_seq,transcript)[1]==1:
                print(transcript,"STOP codon in peptide")
                trouble=4
        else:
            cds_start,cds_end="-1","-1"
        if transcript in gffread_cdna and transcript not in ensemble_cdna:
            trouble=3
        desc=""
        if transcript in ensemble_cdna and "description" in  ensemble_cdna[transcript][1]:
            desc=ensemble_cdna[transcript][1].split("description:")[-1]
            #print(transcript,desc)
        
        complete_info[transcript]={"transcript":transcript,"gene":transcript.split(".")[0],"issues":("None" if trouble==0 else("cDNA sequence wrong" if trouble==1 else ("Peptide sequence wrong" if trouble==2  else ("Absent from Ensemble" if trouble==3 else "STOP codon in peptide")))),"desc":desc.replace(","," "),
                                   "cds_start":cds_start,"cds_end":cds_end}
    
    fhw=open(output_filename,"w")
    fhw.write("Transcript,Gene,CDS_start,CDS_end,Description,issues\n")
    for transcript in complete_info:
        fhw.write(transcript+","+complete_info[transcript]["gene"]+","+complete_info[transcript]["cds_start"]+","+complete_info[transcript]["cds_end"]+
                  ","+complete_info[transcript]["desc"]+","+complete_info[transcript]["issues"]+"\n")
    fhw.close()

def main():
    commandLineArg=sys.argv
    if len(commandLineArg)==1:
        print("Please use the --help option to get usage information")
    options=parseCommandLineArguments()
    ensemble_cdna=readFastaFile(options.cdna_filename)
    ensemble_cdna.update(readFastaFile(options.ncdna_filename))
    #ensemble_ncdna=readFastaFile(options.ncdna_filename)
    ensemble_cds=readFastaFile(options.cds_filename)
    ensemble_prot=readFastaFile(options.proteome)
    gffread_cdna=readFastaFile(options.gffread_filename)
    compareAllFilesAndGenerateAnnotationsFile(ensemble_cdna,ensemble_cds,ensemble_prot,gffread_cdna,options.output_filename)
    

if __name__ == "__main__":
    main()